import React, { useState, useEffect, useRef } from "react";
import axios from "axios";
import ChatUI from "./ChatUI";
import "./App.css";


const LOCAL_KEY = "edu-chat-history";
const SUGGESTED_QUESTIONS = [
  "M·ª•c ti√™u c·ªßa ch∆∞∆°ng tr√¨nh gi√°o d·ª•c ph·ªï th√¥ng l√† g√¨?",
  "M√¥n Ti·∫øng Anh ·ªü c·∫•p trung h·ªçc c∆° s·ªü d·∫°y g√¨?",
  "H·ªçc sinh ƒë∆∞·ª£c ƒë√°nh gi√° th·∫ø n√†o trong m√¥n Gi√°o d·ª•c th·ªÉ ch·∫•t?",
  "M√¥n To√°n ·ªü ti·ªÉu h·ªçc g·ªìm nh·ªØng n·ªôi dung g√¨?",
  "Ch∆∞∆°ng tr√¨nh c√≥ chia giai ƒëo·∫°n gi√°o d·ª•c kh√¥ng?",
  "C√°c m√¥n h·ªçc b·∫Øt bu·ªôc v√† t·ª± ch·ªçn g·ªìm nh·ªØng g√¨?",
  "Gi√°o d·ª•c ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp b·∫Øt ƒë·∫ßu t·ª´ l·ªõp m·∫•y?",
  "Y√™u c·∫ßu c·∫ßn ƒë·∫°t trong m√¥n L·ªãch s·ª≠ l√† g√¨?",
  "Ch∆∞∆°ng tr√¨nh m√¥n ƒê·ªãa l√Ω gi√∫p h·ªçc sinh ph√°t tri·ªÉn nƒÉng l·ª±c n√†o?",
  "N·ªôi dung gi√°o d·ª•c c·ªßa ƒë·ªãa ph∆∞∆°ng ƒë∆∞·ª£c d·∫°y nh∆∞ th·∫ø n√†o?",
];

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [botTyping, setBotTyping] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [darkMode, setDarkMode] = useState(false);
  const [uploadStatus, setUploadStatus] = useState("");
  const [selectedFiles, setSelectedFiles] = useState([]);
  const chatBoxRef = useRef(null);

  useEffect(() => {
    const stored = localStorage.getItem(LOCAL_KEY);
    if (stored) setMessages(JSON.parse(stored));
    setSuggestions([...SUGGESTED_QUESTIONS].sort(() => 0.5 - Math.random()).slice(0, 6));
  }, []);

  useEffect(() => {
    chatBoxRef.current?.scrollTo(0, chatBoxRef.current.scrollHeight);
    localStorage.setItem(LOCAL_KEY, JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    document.body.classList.toggle("dark", darkMode);
  }, [darkMode]);

  const handleSend = async (customInput) => {
    const trimmed = (customInput ?? input).trim();
    if (!trimmed) return;
    const userMessage = {
      role: "user",
      content: trimmed,
      timestamp: new Date().toISOString()
    };
    setMessages((prev) => [...prev, userMessage]);
    setInput("");
    setLoading(true);
    setBotTyping("‚è≥ ƒêang tr·∫£ l·ªùi...");

    try {
      const res = await axios.post("http://localhost:5678/ask", { question: trimmed });
      simulateTyping(res.data.answer || "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi.");
    } catch {
      simulateTyping("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
    }
    setLoading(false);
  };

  const simulateTyping = (text) => {
    let i = 0;
    const interval = setInterval(() => {
      i++;
      setBotTyping(text.slice(0, i));
      if (i >= text.length) {
        clearInterval(interval);
        setMessages((prev) => [...prev, 
          {
            role: "assistant",
            content: text,
            timestamp: new Date().toISOString()
          }
        ]);
        setBotTyping("");
      }
    }, 15);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  const handleFileChange = (e) => {
    setSelectedFiles([...e.target.files]);
    setUploadStatus("");
  };

  const handleUploadConfirm = async () => {
    if (selectedFiles.length === 0) return;
    setUploadStatus("‚è≥ ƒêang x·ª≠ l√Ω c√°c file...");
    for (let file of selectedFiles) {
      const formData = new FormData();
      formData.append("file", file);
      try {
        const res = await axios.post("http://localhost:5678/upload", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });
        setUploadStatus((prev) => prev + `\nüìÑ ${file.name}: ${res.data.message}`);
      } catch {
        setUploadStatus((prev) => prev + `\n‚ùå ${file.name}: L·ªói x·ª≠ l√Ω.`);
      }
    }
    setSelectedFiles([]);
  };

  return (
    <ChatUI
      messages={messages}
      loading={loading}
      botTyping={botTyping}
      chatBoxRef={chatBoxRef}
      input={input}
      setInput={setInput}
      handleSend={handleSend}
      handleKeyDown={handleKeyDown}
      suggestions={suggestions}
      darkMode={darkMode}
      toggleDarkMode={() => setDarkMode(!darkMode)}
      selectedFiles={selectedFiles}
      handleFileChange={handleFileChange}
      handleUploadConfirm={handleUploadConfirm}
      uploadStatus={uploadStatus}
    />
  );
}

export default App;